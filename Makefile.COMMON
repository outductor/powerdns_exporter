# Copyright 2015 The Prometheus Authors
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# THE AUTHORITATIVE VERSION OF THIS MAKEFILE LIVES IN:
#
#   https://github.com/prometheus/utils
#
# PLEASE MAKE ANY CHANGES THERE AND PROPAGATE THEM TO ALL PROMETHEUS
# REPOSITORIES THAT ARE USING THIS MAKEFILE.
#
# This file provides common Makefile infrastructure for several Prometheus
# components. This includes make tasks for downloading Go, setting up a
# self-contained build environment, fetching Go dependencies, building
# binaries, running tests, and doing release management. This file is intended
# to be included from a project's Makefile, which needs to define the following
# variables, at a minimum:
#
# * VERSION - The current version of the project in question.
# * TARGET  - The desired name of the built binary.
#
# Many of the variables defined below are defined conditionally (using '?'),
# which allows the project's main Makefile to override any of these settings, if
# needed. See also:
#
# https://www.gnu.org/software/make/manual/html_node/Flavors.html#Flavors.
#
# The including Makefile may define any number of extra targets that are
# specific to that project.

VERSION ?= $(error VERSION not set in including Makefile)
TARGET  ?= $(error TARGET not set in including Makefile)

SRC    ?= $(shell find . -type f -name "*.go" ! -path "./.build/*")
GOOS   ?= $(shell uname | tr A-Z a-z)
GOARCH ?= $(subst x86_64,amd64,$(patsubst i%86,386,$(shell uname -m)))

# ---- Go toolchain selection --------------------------------------------------

# Required major.minor version (allows 1.24.*)
GO_REQUIRED_MM ?= 1.24
# Fallback version to download (including patch version)
GO_VERSION ?= 1.24.6

# Prioritize snap installation
GO_SNAP ?= /snap/bin/go

GOURL      ?= https://golang.org/dl
GOPKG      ?= go$(GO_VERSION).$(GOOS)-$(GOARCH).tar.gz
GOPATH     := $(CURDIR)/.build/gopath

# 1) If /snap/bin/go exists and is version 1.24.*, use it with highest priority
ifneq ($(wildcard $(GO_SNAP)),)
SNAP_GOVERSION := $(shell "$(GO_SNAP)" env GOVERSION 2>/dev/null)
endif

# 2) If go in PATH exists and is version 1.24.*, use it as second priority
PATH_GO      := $(shell command -v go 2>/dev/null)
ifneq ($(PATH_GO),)
PATH_GOVERSION := $(shell go env GOVERSION 2>/dev/null)
endif

# Priority: /snap/bin/go (1.24.*) -> go in PATH (1.24.*) -> local download
ifeq ($(findstring go$(GO_REQUIRED_MM).,$(SNAP_GOVERSION)),go$(GO_REQUIRED_MM).)
	GOCC   ?= $(GO_SNAP)
	# Derive gofmt from GOROOT (reliable for snap as well)
	GOFMT  ?= $(shell "$(GO_SNAP)" env GOROOT 2>/dev/null)/bin/gofmt
	GO     ?= GOPATH=$(GOPATH) $(GOCC)
else ifeq ($(findstring go$(GO_REQUIRED_MM).,$(PATH_GOVERSION)),go$(GO_REQUIRED_MM).)
	GOCC   ?= $(PATH_GO)
	GOFMT  ?= $(shell go env GOROOT 2>/dev/null)/bin/gofmt
	GO     ?= GOPATH=$(GOPATH) $(GOCC)
else
	GOROOT ?= $(CURDIR)/.build/go$(GO_VERSION)
	GOCC   ?= $(GOROOT)/bin/go
	GOFMT  ?= $(GOROOT)/bin/gofmt
	GO     ?= GOROOT=$(GOROOT) GOPATH=$(GOPATH) $(GOCC)
endif

# Never honor GOBIN, should it be set at all.
unexport GOBIN

SUFFIX   ?= $(GOOS)-$(GOARCH)
BINARY   ?= $(TARGET)
ARCHIVE  ?= $(TARGET)-$(VERSION).$(SUFFIX).tar.gz
ROOTPKG  ?= github.com/janeczku/$(TARGET)
SELFLINK ?= $(GOPATH)/src/$(ROOTPKG)

default: $(BINARY)

# This target is only reached in "local download mode"
$(GOCC):
	@echo "Go $(GO_VERSION) not usable from snap/PATH. Bootstrapping local toolchain..."
	@echo "About to download and install go$(GO_VERSION) to $(GOROOT)"
	@echo
	@sleep 2
	mkdir -p .build
	# The archive contains a single directory called 'go/'.
	curl -L $(GOURL)/$(GOPKG) | tar -C .build -xzf -
	rm -rf $(GOROOT)
	mv .build/go $(GOROOT)

$(SELFLINK):
	mkdir -p $(dir $@)
	ln -s $(CURDIR) $@

# ---- Dependencies ------------------------------------------------------------
# Go 1.24 doesn't allow 'go get -d' outside modules.
# If go.mod exists, use 'go mod download', otherwise show error with initialization instructions.
dependencies-stamp: $(GOCC) $(SRC) | $(SELFLINK)
	@if [ -f go.mod ]; then \
		echo "==> go.mod detected; downloading dependencies"; \
		$(GO) mod download; \
	else \
		echo "ERROR: go.mod not found. Modern Go (>=1.16) requires modules."; \
		echo "       Initialize modules once, then re-run make:"; \
		echo "         $(GOCC) mod init $(ROOTPKG)"; \
		echo "         $(GOCC) mod tidy"; \
		exit 2; \
	fi
	@touch $@

# ---- Build / Test / Etc. -----------------------------------------------------

$(BINARY): $(GOCC) $(SRC) dependencies-stamp Makefile Makefile.COMMON
	$(GO) build $(GOFLAGS) -o $@ ./...

.PHONY: archive
archive: $(ARCHIVE)

$(ARCHIVE): $(BINARY)
	tar -czf $@ $<

.PHONY: tag
tag:
	git tag $(VERSION)
	git push --tags

.PHONY: test
test: $(GOCC) dependencies-stamp
	$(GO) test ./...

.PHONY: format
format: $(GOCC)
	find . -iname '*.go' | egrep -v "^\./\.build|./generated|\./Godeps|\.(l|y)\.go" | xargs -n1 $(GOFMT) -w -s=true

.PHONY: clean
clean:
	rm -rf $(BINARY) $(ARCHIVE) .build *-stamp

